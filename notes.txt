-- NOTES ON DBMS --


- DAY 1 -


data for specific columns(attributes) of a table have to be of specific types.


basic SQL queries:




CREATE TABLE *name_of_table*
creates a database/table

so a basic create statement would be:

"CREATE TABLE students (

    s_id int,
    name varchar(50),
    cgpa float
);"

so you can see that the variable name is declared first, and THEN the data type.





SELECT
selects data from the table

so a typical select statement would be:

"SELECT * FROM *table_name*;"
here, after SELECT, the asterisk means everything is selected

another example would be, to just show the "names" attribute:
"SELECT name FROM *table_name*;"


INSERT
inserting data into the table

so a basic insert statement would be:

"INSERT INTO *table_name*
VALUES (int (bc id was declared first), "string"(bc string was declared after), float (bc float was entered after)), (*and repeat format here for new values);"

ORDER OF VALUES MUST BE THE SAME AS THE WAY IT WAS DECLARED IN THE CREATE CLAUSE



SYNTAX:

for the keywords, caps are the standard, but instructor does prefer lowercase.
every statement must also end with a semicolon.


DATA TYPES IN SQL:

int -> int
string -> varchar(*length of string*)
float -> float/double

refer to: https://www.w3schools.com/sql/sql_ref_keywords.asp
for more info.

now you can finally start looking up sql commands and stuff.



- DAY 2 - 


to be specific, coding interviews consist mostly of:

 coding (35%), databases (35%), and OOP (30%)
 so databases are def important.




DISTINCT:
shows unique values in a specific column.

SYNTAX:
SELECT DISTINCT col_1
FROM ...



AS (alias):
shows a specific column as a different column name.

SYNTAX:
SELECT col_1 AS new_col_name
FROM...

so, this might be useful, in say, showing the name as "Name". Keep in mind, that quotes are not needed when displaying an alias. however, if the column name
includes a space, then double quotes must be used.




CONCAT:
joins a string with the data on the database to view it nicely.

SYNTAX:
SELECT CONCAT(col_1, " string ", col_2)
FROM ...




a combination of all of these may be:

SELECT CONCAT(name, " belongs to the ", department, " and his/her CGPA is: ", cgpa)
AS "Student Info"
FROM students;




WHERE:
shows instances (rows) based on specific conditions. comes after the FROM clause.

SYNTAX:
SELECT *
FROM table_name
WHERE *condition*;

when trying to match a string in the condition, the comparison must also be with a string in double quotes.
LOGICAL OPERATORS may also be used here (AND/and/&&, OR/or/|, NOT/not/!, and combined conditions too), 
and also COMPARISON OPERATORS (>, <, =, >=, <=, <>, etc.)


if we chain conditions, the order of logical operators comes into play:

the AND operator comes first,
then the OR operator
of course, you can always use parentheses to make things easier.

for the NOT operator,
not only can we negate a comparison,
we can also negate or reverse a logical operation as well.

for example, we could have written:
NOT (date < "2000-01-01" OR marks > 80)

and this would be equivalent to:
date >= "2000-01-01" AND marks <= 80




arithmetic operators can also be used in the where clause.

** in SQL, the format for date is: YYYY-MM-DD (it is not stored as a string, but when using the where operator, we enclose the date in double quotes)




IN:
when we have to compare an attribute to a list of values, things can be made easier by using the in operator.

SYNTAX EXAMPLE:
SELECT *
FROM table_name
WHERE section IN ("Aquila", "Cygnus", "Auriga")

what does it mean?
this is the same as writing:
WHERE section = "Aquila" OR section = "Cygnus" OR section = "Auriga"

since the second one is a bit too long/redundant, the IN operator can be used, making things easier.

we can also chain this with the not operator, like this:
WHERE section NOT IN ("Aquila", "Cygnus", "Auriga")
which would show all students not in those sections.





BETWEEN:
whenever we are comparing attributes within a range of values, we can use the between operator, which makes our code smaller, and easier to read.

SYNTAX:
SELECT *
FROM table_name
WHERE marks BETWEEN *lower_bound* AND *upper_bound*

this is the exact same as writing:
WHERE marks >= lower_bound AND marks <= upper_bound

the BETWEEN operator is inclusive, i.e, it includes the value we put in the bound for comparison.






LIKE:
used to get rows that match a specific string pattern. for example, you wanna get the last name of customers whose last names start with b. then the

SYNTAX EXAMPLE: (would be)
SELECT *
FROM table_name
WHERE last_name LIKE "b%"

the % symbol means any number and combination of characters may follow after the specified string. it is case insensitive.
here, the value enclosed in the string is case insensitive, and we can match whatever pattern we want.

e.g, if we wanna get the names of people whose names start with brush- and then whatever,
it would be:
WHERE last_name LIKE "brush%"

DEPENDING ON THE PLACEMENT OF "%", you can search and match strings in different ways,

e.g, if we wanna get the names of people who have a "b" anywhere in their name, we'd write it like this:
WHERE last_name LIKE "%b%"

another example would be if we wanna get the names of people who have a "y" at the end of their name, and write it like this:
WHERE last_name LIKE "%y"

WE CAN ALSO SPECIFY THE NUMBER OF CHARACTERS THAT NEED TO FOLLOW, OR PRECEDE, OR BE AROUND THE SEARCHED STRING WE WANT.
we can do this by using an underscore, "_". the number of underscores specify the number of characters.
e.g,
WHERE last_name LIKE "_y"
means people whose last name only have two characters and end in "y".

so we can combine this in different ways, for example if we want the names of people whose names start with "b", have 5 characters in between, and end with "y",
then the where clause would look like this:
WHERE last_name LIKE "b_____y"

so, in summary, we can use the:
"%" operator within LIKE to specify any number of characters in that place.
"_" operator to specify a single character in that place.

we can chain two LIKE operators with a logical one, like:

WHERE last_name LIKE "%b" OR last_name LIKE "%y".






- DAY 3 -

assignments must include: a .txt file with the sql for each task.
a screenshot of the output.






- DAY 4 -


